---
// src/components/GradientCard.astro
import { Code } from 'astro/components';
import { twMerge } from 'tailwind-merge';

interface Props {
  title: string;
  gradientClass: string;
  cssCode: string;
  codeButtonClass?: string;
}

const { title, gradientClass, cssCode, codeButtonClass } = Astro.props;
---

<div>
  <h1 class="heading">{title}</h1>
  <div class="card resize relative min-h-72 max-w-full">
    <div
      class={`gradient-display resize h-full w-full cursor-pointer ${gradientClass}`}
      data-gradient-class={gradientClass}
      data-css-code={cssCode}
    >
    </div>

    <button
      class={twMerge(
        'gradient-text absolute top-2 right-2 bg-gray-100 text-gray-800 px-5 py-1 rounded-md text-sm z-10',
        codeButtonClass,
      )}
    >
      Code
    </button>

    <div class="code-display hidden absolute inset-0 bg-gray-50 p-0 overflow-auto">
      <Code class:list={['px-10 py-5']} lang="css" theme="one-light" wrap code={cssCode} />
      <button
        class="close-code-button absolute top-2 right-2 text-white bg-gray-700 px-2 py-1 rounded-md text-sm z-10 hover:bg-gray-800"
      >
        Gradient
      </button>
    </div>
  </div>

  <script is:inline define:vars={{ gradientClass }}>
    document.addEventListener('DOMContentLoaded', () => {
      const card = document
        .querySelector(`.card .gradient-display[data-gradient-class="${gradientClass}"]`)
        .closest('.card');

      if (!card) {
        console.error('ERROR: Card element not found for:', gradientClass);
        return;
      }

      const gradientDisplay = card.querySelector('.gradient-display');
      const codeDisplay = card.querySelector('.code-display');
      const closeButton = card.querySelector('.close-code-button');
      const codeToggleButton = card.querySelector('.gradient-text');

      // Helper function to show code and hide gradient view
      const showCodeView = () => {
        gradientDisplay.classList.add('hidden');
        if (codeToggleButton) {
          codeToggleButton.classList.add('hidden');
        }
        codeDisplay.classList.remove('hidden');
      };

      // Helper function to show gradient and hide code view
      const showGradientView = () => {
        codeDisplay.classList.add('hidden');
        gradientDisplay.classList.remove('hidden');
        if (codeToggleButton) {
          // Check if button exists
          codeToggleButton.classList.remove('hidden');
        }
      };

      // 1. Show code on "Code" button click
      if (codeToggleButton) {
        codeToggleButton.addEventListener('click', event => {
          event.stopPropagation(); // Prevent click from bubbling to gradientDisplay or card
          showCodeView();
        });
      }

      // 2. Show code on gradient card (gradientDisplay) click
      if (gradientDisplay) {
        gradientDisplay.addEventListener('click', event => {
          // Only show code if it's not already visible and not clicking the close button
          if (codeDisplay.classList.contains('hidden') && event.target !== closeButton) {
            showCodeView();
          }
        });
      }

      // 3. Close code on "Gradient" button click
      if (closeButton) {
        closeButton.addEventListener('click', event => {
          event.stopPropagation(); // Prevent click from bubbling up
          showGradientView();
        });
      }

      // 4. Close code on outside click
      document.addEventListener('click', event => {
        if (!card.contains(event.target) && !codeDisplay.classList.contains('hidden')) {
          showGradientView();
        }
      });
    });
  </script>

  <style>
    .card {
      width: 100%;
      height: 20em; /* This is the "normal size" you referred to */
      border-radius: 0.5rem;
      overflow: hidden; /* Ensures content is clipped */
    }
    .card:hover {
      transition:
        transform 0.3s ease,
        box-shadow 0.3s ease;
      transform: translateY(-1px);
      box-shadow: 8px 8px 20px 2px rgba(0, 0, 0, 0.09);
    }

    .heading {
      font-size: clamp(1rem, calc(0.5vw + 1rem), 2rem);
      font-family: 'Work', sans-serif;
      text-transform: uppercase;
      margin-bottom: 0rem;
      text-align: left; /* Centering the heading */
    }

    /* Basic styling for the gradient display */
    .gradient-display {
      transition: opacity 0.3s ease; /* For smooth show/hide */
      position: relative; /* Ensure it stays in its normal flow position */
      z-index: 1; /* Make sure it's above potential siblings if you add them */
    }

    /* Styling for the code display when it's visible */
    .code-display {
      /* This div uses absolute positioning to fully cover its parent .card */
      display: flex; /* Use flexbox to center the Code component */
      align-items: center;
      justify-content: center;
      transition: opacity 0.3s ease; /* For smooth show/hide */
      z-index: 2; /* Ensure it overlays the gradient display */
    }

    .code-display.hidden[data-astro-cid-qp7awotk] {
      display: none !important;
    }

    .gradient-text.hidden[data-astro-cid-qp7awotk] {
      display: none !important;
    }

    /* Styles to make the Astro Code component look good within the overlay */
    .code-display :global(.astro-code) {
      width: 95%; /* Adjust width to fit */
      height: 90%; /* Adjust height */
      overflow: auto; /* Add scrollbars if code overflows */
      flex-shrink: 0; /* Prevent it from shrinking if content is large */
      display: flex;
      flex-direction: column;
      justify-content: top; /* Center code block vertically if space allows */
    }

    .code-display :global(pre),
    .code-display :global(code) {
      background-color: transparent !important; /* Override Code component's default background */
      padding: 0 !important; /* Remove default padding */
      font-size: 0.875rem; /* Adjust font size if needed */
      line-height: 1.5;
    }

    /* Ensure the text 'Click to see code' is also hidden/shown correctly */
    .gradient-text.hidden {
      display: none;
    }
  </style>
</div>
