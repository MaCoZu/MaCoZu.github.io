---
// src/components/GradientCard.astro
import { Code } from 'astro/components';
import { twMerge } from 'tailwind-merge';

const { title, gradientClass, cssCode, codeButtonClass } = Astro.props;
---

<div>
  <h1 class="heading">{title}</h1>
  <div class="card resize relative min-h-72 max-w-full">
    <div
      class={`gradient-display resize h-full w-full cursor-pointer ${gradientClass}`}
      data-gradient-class={gradientClass}
      data-css-code={cssCode}
    >
    </div>

    <button
      class={twMerge(
        'gradient-text absolute top-4 right-8 bg-gray-100 text-gray-800 px-5 py-1 rounded-md text-sm z-10',
        codeButtonClass,
      )}
    >
      Code
    </button>

    <div class="code-display hidden absolute inset-0 bg-gray-50 p-0 overflow-auto">
      <Code class:list={['px-10 py-5']} lang="css" theme="one-light" wrap code={cssCode} />

      <!-- Copy and Close buttons container -->
      <div class="button-container absolute top-4 right-8 flex gap-2 z-10">
        <button
          class="copy-button bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-md text-sm transition-colors duration-200"
          data-css-code={cssCode}
          title="Copy CSS code"
        >
          Copy
        </button>
        <button
          class="close-code-button bg-gray-700 hover:bg-gray-800 text-white px-3 py-1 rounded-md text-sm transition-colors duration-200"
        >
          Close
        </button>
      </div>
    </div>
  </div>

  <script is:inline define:vars={{ gradientClass, cssCode }}>
    document.addEventListener('DOMContentLoaded', () => {
      const card = document
        .querySelector(`.card .gradient-display[data-gradient-class="${gradientClass}"]`)
        .closest('.card');

      if (!card) {
        console.error('ERROR: Card element not found for:', gradientClass);
        return;
      }

      const gradientDisplay = card.querySelector('.gradient-display');
      const codeDisplay = card.querySelector('.code-display');
      const closeButton = card.querySelector('.close-code-button');
      const codeToggleButton = card.querySelector('.gradient-text');
      const copyButton = card.querySelector('.copy-button');

      // Helper function to show code and hide gradient view
      const showCodeView = () => {
        gradientDisplay.classList.add('hidden');
        if (codeToggleButton) {
          codeToggleButton.classList.add('hidden');
        }
        codeDisplay.classList.remove('hidden');
      };

      // Helper function to show gradient and hide code view
      const showGradientView = () => {
        codeDisplay.classList.add('hidden');
        gradientDisplay.classList.remove('hidden');
        if (codeToggleButton) {
          codeToggleButton.classList.remove('hidden');
        }
      };

      // Copy to clipboard functionality
      const copyToClipboard = async text => {
        try {
          await navigator.clipboard.writeText(text);
          return true;
        } catch {
          // Fallback for older browsers
          const textArea = document.createElement('textarea');
          textArea.value = text;
          textArea.style.position = 'fixed';
          textArea.style.left = '-999999px';
          textArea.style.top = '-999999px';
          document.body.appendChild(textArea);
          textArea.focus();
          textArea.select();

          try {
            document.execCommand('copy');
            document.body.removeChild(textArea);
            return true;
          } catch {
            document.body.removeChild(textArea);
            return false;
          }
        }
      };

      // Show visual feedback for copy action
      const showCopyFeedback = button => {
        const originalText = button.textContent;
        button.textContent = 'Copied!';
        button.classList.add('bg-green-600');
        button.classList.remove('bg-blue-600', 'hover:bg-blue-700');

        setTimeout(() => {
          button.textContent = originalText;
          button.classList.remove('bg-green-600');
          button.classList.add('bg-blue-600', 'hover:bg-blue-700');
        }, 2000);
      };

      // 1. Show code on "Code" button click
      if (codeToggleButton) {
        codeToggleButton.addEventListener('click', event => {
          event.stopPropagation();
          showCodeView();
        });
      }

      // 2. Show code on gradient card (gradientDisplay) click
      if (gradientDisplay) {
        gradientDisplay.addEventListener('click', event => {
          if (codeDisplay.classList.contains('hidden') && event.target !== closeButton) {
            showCodeView();
          }
        });
      }

      // 3. Close code on "Close" button click
      if (closeButton) {
        closeButton.addEventListener('click', event => {
          event.stopPropagation();
          showGradientView();
        });
      }

      // 4. Copy button functionality
      if (copyButton) {
        copyButton.addEventListener('click', async event => {
          event.stopPropagation();
          const success = await copyToClipboard(cssCode);
          if (success) {
            showCopyFeedback(copyButton);
          } else {
            // Show error feedback
            const originalText = copyButton.textContent;
            copyButton.textContent = 'Failed';
            copyButton.classList.add('bg-red-600');
            copyButton.classList.remove('bg-blue-600', 'hover:bg-blue-700');

            setTimeout(() => {
              copyButton.textContent = originalText;
              copyButton.classList.remove('bg-red-600');
              copyButton.classList.add('bg-blue-600', 'hover:bg-blue-700');
            }, 2000);
          }
        });
      }

      // 5. Close code on outside click
      document.addEventListener('click', event => {
        if (!card.contains(event.target) && !codeDisplay.classList.contains('hidden')) {
          showGradientView();
        }
      });
    });
  </script>

  <style>
    .card {
      width: 100%;
      height: 20em;
      border-radius: 0.5rem;
      overflow: hidden;
    }
    .card:hover {
      transition:
        transform 0.3s ease,
        box-shadow 0.3s ease;
      transform: translateY(-1px);
      box-shadow: 8px 8px 20px 2px rgba(0, 0, 0, 0.09);
    }

    .heading {
      font-size: clamp(1rem, calc(0.5vw + 1rem), 2rem);
      font-family: 'Work', sans-serif;
      text-transform: uppercase;
      margin-bottom: 0rem;
      text-align: left;
    }

    .gradient-display {
      transition: opacity 0.3s ease;
      position: relative;
      z-index: 1;
    }

    .code-display {
      display: flex;
      align-items: center;
      justify-content: center;
      transition: opacity 0.3s ease;
      z-index: 2;
    }

    .code-display.hidden[data-astro-cid-qp7awotk] {
      display: none !important;
    }

    .gradient-text.hidden[data-astro-cid-qp7awotk] {
      display: none !important;
    }

    .button-container {
      gap: 0.5rem;
    }

    .code-display :global(.astro-code) {
      width: 95%;
      height: 90%;
      overflow: auto;
      flex-shrink: 0;
      display: flex;
      flex-direction: column;
      justify-content: top;
    }

    .code-display :global(pre),
    .code-display :global(code) {
      background-color: transparent !important;
      padding: 0 !important;
      font-size: 0.875rem;
      line-height: 1.5;
    }

    .gradient-text.hidden {
      display: none;
    }
  </style>
</div>
