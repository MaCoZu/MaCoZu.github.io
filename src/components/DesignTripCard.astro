---
const { href, imagePath, imageAlt, heading, text, objectFit = 'object-fit' } = Astro.props;
---

<div class="col-span-1 md:col-span-6 lg:col-span-3 mr-2">
  <a {href}>
    <div class="relative w-full h-44 rounded-sm overflow-hidden">
      <!-- Background mask -->
      <div class="radial-mask absolute inset-0"></div>

      <!-- Text content -->
      <div class="flex flex-col justify-center items-center h-full w-full relative z-10">
        <div
          class="trippy-text font-funky text-3xl md:text-4xl text-black prose tracking-widest text-pretty flex flex-col items-center"
        >
          <div class="mb-2">Dancing</div>
          <div>Letters</div>
        </div>
      </div>
    </div>

    <div class="mt-3 px-1">
      <h1 class="font-literata text-lg uppercase text-primary tracking-wide font-semibold mb-1">
        {heading}
      </h1>
      <p>{text}</p>
    </div>
  </a>
</div>
<style>
  .radial-mask {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    background: repeating-conic-gradient(
      from 45deg at 0% 0%,
      rgba(250, 166, 166, 0.326) 0deg 18deg,
      rgba(170, 187, 247, 0.393) 18deg 28deg,
      rgba(249, 158, 243, 0.335) 28deg 47deg
    );
    mask-image:
      radial-gradient(circle at 15% 15%, black 10%, transparent 80%),
      radial-gradient(ellipse at top, black 10%, transparent 80%);
    /* mask-composite: intersect; */
    pointer-events: none;
  }
  .relative-card-bg {
    position: relative;
    width: 100%;
    height: 100%;
  }
</style>
<script>
  import { gsap } from 'gsap';
  import { SplitText } from 'gsap/SplitText';

  gsap.registerPlugin(SplitText);

  const deepcoral_palette = ['#ffbe0b', 'fb5607', '#ff006e', '#8338ec', '#3a86ff'];

  gsap.registerEffect({
    name: 'trippyWobble',
    extendTimeline: true,
    defaults: {
      activeCharRatio: 0.7,
      durationRange: [10, 15],
      xRange: [-0.8, 0.8],
      yRange: [-0.8, 0.8],
      rotationRange: [-2, 2],
      scaleXRange: [0.97, 1.03],
      scaleYRange: [0.96, 1.04],
      colors: null,
      glow: true,
    },

    effect: (
      targets: gsap.DOMTarget,
      config: {
        activeCharRatio: 0.7;
        motionPath: boolean;
        glow: boolean;
        durationRange: [number, number];
        xRange: [number, number];
        yRange: [number, number];
        rotationRange: [number, number];
        scaleXRange: [number, number];
        scaleYRange: [number, number];
        colors: string[];
      },
    ) => {
      const split = new SplitText(targets, {
        type: 'chars',
        charsClass: 'char inline-block',
      });

      const chars = split.chars;

      (chars as HTMLElement[]).forEach(char => {
        char.style.willChange = 'transform, color, filter';

        gsap.set(char, {
          transformOrigin: '50% 50%',
          scaleX: 1,
          scaleY: 1,
          rotation: 0,
          willChange: 'transform',
        });

        // Subtle glow style from CSS, only blur is animated
        function animateCharBlur() {
          gsap.to(char, {
            filter: `blur(${gsap.utils.random(0.2, 0.7)}px)`,
            duration: gsap.utils.random(3, 6),
            ease: 'sine.inOut',
            onComplete: animateCharBlur,
          });
        }
        animateCharBlur();

        // Animate transform motion
        function animateCharTransform(char: HTMLElement) {
          gsap.to(char, {
            x: gsap.utils.random(...config.xRange),
            y: gsap.utils.random(...config.yRange),
            rotation: gsap.utils.random(...config.rotationRange),
            scaleX: gsap.utils.random(...config.scaleXRange),
            scaleY: gsap.utils.random(...config.scaleYRange),
            skewX: gsap.utils.random(-1, 1),
            skewY: gsap.utils.random(-1, 1),
            duration: gsap.utils.random(...config.durationRange),
            ease: 'sine.inOut',
            delay: gsap.utils.random(5, 8),
            onComplete: () => animateCharTransform(char),
          });
        }

        gsap.delayedCall(gsap.utils.random(0, 2.5), () => animateCharTransform(char));

        // Smooth color cycling with keyframes (no recursion)
        if (config.colors?.length) {
          gsap.to(char, {
            keyframes: config.colors.map(c => ({ color: c })),
            duration: gsap.utils.random(9, 12),
            repeat: -1,
            yoyo: true,
            ease: 'sine.inOut',
            delay: gsap.utils.random(0, 3),
          });
        }
      });

      return gsap.timeline(); // enables timeline chaining if needed
    },
  });

  gsap.effects.trippyWobble('.trippy-text', {
    durationRange: [12, 15],
    xRange: [-0.95, 0.95],
    yRange: [-0.95, 0.95],
    rotationRange: [-2, 2],
    scaleXRange: [0.9, 1.3],
    scaleYRange: [0.9, 1.5],
    colors: deepcoral_palette,
    glow: true,
  });
</script>
