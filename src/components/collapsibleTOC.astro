---
// src/components/TOC.astro
interface Props {
    headings: {
        depth: number;
        slug: string;
        text: string;
    }[];
}

const { headings } = Astro.props;
---

<div
    class="fixed left-10 top-1/2 -translate-y-1/2 flex items-center"
    style="top: h-[calc(100vh-6rem)]"
>
    <!-- TOC Content (visible by default) -->
    <aside id="toc-content" class="w-64 bg-white transition-all duration-900">
        <nav class="text-sm space-y-1 p-4 h-full overflow-y-auto">
            <div class="flex justify-between items-center mb-2">
                <h3 class="font-semibold text-gray-700">Inhaltsverzeichnis</h3>
                <button
                    id="toc-toggle"
                    class="text-gray-400 hover:text-gray-600"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-4 w-4"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                    >
                        <path
                            fill-rule="evenodd"
                            d="M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 010 1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>
            <ul class="list-none pl-0">
                {
                    headings.map((h) => (
                        <li
                            class={`${h.depth === 3 ? "ml-3" : ""} leading-snug my-1`}
                        >
                            <a
                                href={`#${h.slug}`}
                                class="text-gray-600 hover:text-blue-600 transition-colors line-clamp-1 hover:line-clamp-none"
                            >
                                {h.text}
                            </a>
                        </li>
                    ))
                }
            </ul>
        </nav>
    </aside>

    <!-- Collapsed Handle (hidden by default) -->
    <button
        id="toc-handle"
        class="hidden w-6 h-12 bg-gray-100 hover:bg-gray-200 rounded-l-lg items-center justify-center transition-all duration-200 ml-1"
        aria-label="Show Table of Contents"
    >
        <svg
            class="w-4 h-4 text-gray-500"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
        >
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M13 5l7 7-7 7M5 5l7 7-7 7"></path>
        </svg>
    </button>
</div>

<script is:inline>
    document.addEventListener("DOMContentLoaded", () => {
        const tocContent = document.getElementById("toc-content");
        const tocHandle = document.getElementById("toc-handle");
        const tocToggle = document.getElementById("toc-toggle");
        let isCollapsed = false;

        // Toggle functionality
        function toggleTOC() {
            isCollapsed = !isCollapsed;
            if (isCollapsed) {
                tocContent.classList.add("hidden");
                tocHandle.classList.remove("hidden");
            } else {
                tocContent.classList.remove("hidden");
                tocHandle.classList.add("hidden");
            }
        }

        // Click to toggle
        tocToggle.addEventListener("click", toggleTOC);
        tocHandle.addEventListener("click", toggleTOC);

        // Hover to show (when collapsed)
        tocHandle.addEventListener("mouseenter", () => {
            if (isCollapsed) {
                tocContent.classList.remove("hidden");
            }
        });

        // Hide when mouse leaves (if collapsed)
        tocContent.addEventListener("mouseleave", () => {
            if (isCollapsed) {
                tocContent.classList.add("hidden");
            }
        });
    });
</script>

<style>
    /* Smooth scrolling */
    html {
        scroll-behavior: smooth;
    }

    /* Better hover transitions */
    #toc-content {
        transition:
            transform 0.2s ease,
            opacity 0.2s ease;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
        .fixed {
            top: auto;
            bottom: 1rem;
            transform: none !important;
        }
        #toc-content {
            max-height: 50vh;
        }
    }
</style>
