---
import data from "../../data/footprint.json";
---

<div class="-mt-8 flex justify-center items-start gap-x-4">
    <div id="container" class="flex justify-center"></div>
</div>

<script src="/lib/d3.v7.js" is:inline></script>

<script
    id="footprint-data"
    type="application/json"
    set:html={JSON.stringify(data)}
/>

<script is:inline>
    document.addEventListener("astro:after-swap", () => {
        // Ensure D3 is loaded before initializing the chart
        if (typeof d3 !== "undefined") {
            initializeChart();
        } else {
            console.error("D3 is not loaded.");
        }
    });

    function initializeChart() {
        console.log("D3 loaded, initializing chart...");

        try {
            // Hard-coded data as a fallback
            const defaultData = [
                {
                    "": 0,
                    Country: "Afghanistan",
                    "Data Quality": "3A",
                    SDGi: 52.5,
                    "Life Expectancy": 62,
                    HDI: 0.48,
                    "Per Capita GDP": "",
                    Region: "Middle East/Central Asia",
                    "Income Group": "LI",
                    "Population (millions)": 40.8,
                    "Number of Earths required": 0.5,
                },
                {
                    "": 1,
                    Country: "Albania",
                    "Data Quality": "3A",
                    SDGi: 71.6,
                    "Life Expectancy": 76,
                    HDI: 0.8,
                    "Per Capita GDP": 14889,
                    Region: "Other Europe",
                    "Income Group": "UM",
                    "Population (millions)": 2.9,
                    "Number of Earths required": 1.4,
                },
                {
                    "": 2,
                    Country: "Algeria",
                    "Data Quality": "3A",
                    SDGi: 71.5,
                    "Life Expectancy": 76,
                    HDI: 0.75,
                    "Per Capita GDP": 11137,
                    Region: "Africa",
                    "Income Group": "UM",
                    "Population (millions)": 45.4,
                    "Number of Earths required": 1.5,
                },
                {
                    "": 3,
                    Country: "Angola",
                    "Data Quality": "3A",
                    SDGi: 50.9,
                    "Life Expectancy": 62,
                    HDI: 0.59,
                    "Per Capita GDP": 6304,
                    Region: "Africa",
                    "Income Group": "LM",
                    "Population (millions)": 35,
                    "Number of Earths required": 0.6,
                },
                {
                    "": 4,
                    Country: "Antigua and Barbuda",
                    "Data Quality": "2B",
                    SDGi: "",
                    "Life Expectancy": 78,
                    HDI: 0.79,
                    "Per Capita GDP": 18749,
                    Region: "Central America/Caribbean",
                    "Income Group": "HI",
                    "Population (millions)": 0.1,
                    "Number of Earths required": 1.9,
                },
                {
                    "": 5,
                    Country: "Argentina",
                    "Data Quality": "3A",
                    SDGi: 72.8,
                    "Life Expectancy": 75,
                    HDI: 0.84,
                    "Per Capita GDP": 22117,
                    Region: "South America",
                    "Income Group": "UM",
                    "Population (millions)": 46,
                    "Number of Earths required": 2.1,
                },
            ];

            // Try to load data from the DOM
            let data;
            const dataElement = document.getElementById("footprint-data");
            if (dataElement) {
                try {
                    data = JSON.parse(dataElement.textContent);
                    if (!data || !Array.isArray(data) || data.length === 0) {
                        console.warn(
                            "Invalid or empty data, using default data.",
                        );
                        data = defaultData;
                    }
                } catch (err) {
                    console.warn("Data parsing failed, using default data.");
                    data = defaultData;
                }
            } else {
                console.warn("Data element not found, using default data.");
                data = defaultData;
            }

            // Clear container if there's anything in it already
            const container = document.getElementById("container");
            container.innerHTML = "";
            // Define margins and dimensions
            const margin = { top: 10, right: 30, bottom: 80, left: 90 };
            const width = 950 - margin.left - margin.right;
            const height = 550 - margin.top - margin.bottom;

            // Select the container and append a div for the chart
            // const chartContainer = d3.select(container);
            const chart = d3
                .select("#container")
                .append("div")
                .attr("id", "chart-container")
                .style("display", "flex")
                .style("flex-direction", "row")
                .style("align-items", "center");

            // Append SVG to the chart container
            const svg = chart
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            // Use the imported JSON data directly
            // const data = rawData;

            // if (!data || data.length === 0) {
            //     console.error("Data is empty or could not be loaded");
            //     return;
            // }

            // Parse data if needed (depends on your JSON structure)
            data.forEach((d) => {
                // Make sure these property names match exactly what's in your JSON
                d.Country = d.Country;
                d.Region = d.Region;
                d.SDGi = +d.SDGi; // The + operator converts strings to numbers
                d.HDI = +d.HDI;
                d["Life Exectancy"] = +d["Life Exectancy"];
                d["Per Capita GDP"] = +d["Per Capita GDP"];
                d["Income Group"] = d["Income Group"];
                d["Population (millions)"] = +d["Population (millions)"];
                d["Number of Earths required"] =
                    +d["Number of Earths required"];
            });

            // Define scales
            const x = d3
                .scaleLinear()
                .domain(d3.extent(data, (d) => d.HDI))
                .range([0, width]);

            const y = d3
                .scaleLinear()
                .domain(d3.extent(data, (d) => d["Number of Earths required"]))
                .range([height, 0]);

            // Add X axis
            svg.append("g")
                .attr("transform", `translate(0,${height})`)
                .call(d3.axisBottom(x));

            // X axis title
            svg.append("text")
                .attr("x", width / 2)
                .attr("y", height + 60)
                .style("text-anchor", "middle")
                .text("Human Development Index");

            // Add Y axis
            svg.append("g").call(d3.axisLeft(y));

            // Y axis title
            svg.append("text")
                .attr(
                    "transform",
                    `translate(${-60}, ${height / 2}) rotate(-90)`,
                )
                .attr("text-anchor", "middle")
                .text("Number of Earths");

            // Define color scale for regions
            const color = d3
                .scaleOrdinal()
                .domain([
                    "Africa",
                    "EU-27",
                    "Other Europe",
                    "Middle East/Central Asia",
                    "Asia-Pacific",
                    "North America",
                    "Central America/Caribbean",
                    "South America",
                ])
                .range([
                    "darkgoldenrod",
                    "blue",
                    "tan",
                    "darkolivegreen",
                    "crimson",
                    "blueviolet",
                    "fuchsia",
                    "purple",
                ]);

            let selectedRegion = null;

            // Tooltip setup
            const tooltip = d3
                .select("body")
                .append("div")
                .attr("class", "tooltip")
                .style("opacity", 0)
                .style("position", "absolute")
                .style("background", "white")
                .style("border", "1px solid #ccc")
                .style("padding", "10px")
                .style("border-radius", "5px");

            // Tooltip functions
            const showTooltip = (event, d) => {
                tooltip.transition().duration(200).style("opacity", 0.9);

                tooltip
                    .html(
                        `
                <table>
                    <tr><td>Country</td><td><strong>${d.Country}</strong></td></tr>
                    <tr><td>Region</td><td><strong>${d.Region}</strong></td></tr>
                    <tr><td>Earths required</td><td><strong>${d["Number of Earths required"]}</strong></td></tr>
                    <tr><td>SDG</td><td><strong>${d.SDGi.toFixed(2)}</strong></td></tr>
                    <tr><td>HDI</td><td><strong>${d.HDI.toFixed(2)}</strong></td></tr>
                    <tr><td>Life Expectancy</td><td><strong>${d["Life Exectancy"].toFixed(2)}</strong></td></tr>
                    <tr><td>GDP pc.</td><td><strong>$ ${d["Per Capita GDP"].toFixed(0)}</strong></td></tr>
                </table>
            `,
                    )
                    .style("left", `${event.pageX + 10}px`)
                    .style("top", `${event.pageY - 28}px`)
                    .style("z-index", 10);
            };

            const hideTooltip = () => {
                tooltip.transition().duration(500).style("opacity", 0);
            };

            // Highlight and selection functions
            const highlight = (event, d) => {
                const region = d.Region || d;
                d3.selectAll(".dot")
                    .transition()
                    .duration(200)
                    .style("fill", (dot) =>
                        dot.Region === region ? color(region) : "grey",
                    )
                    .attr("r", (dot) => (dot.Region === region ? 7 : 3));
            };

            const doNotHighlight = () => {
                if (!selectedRegion) {
                    d3.selectAll(".dot")
                        .transition()
                        .duration(200)
                        .style("fill", (d) => color(d.Region))
                        .attr("r", 4);
                }
            };

            const toggleSelection = (event, d) => {
                const region = d.Region || d;
                if (selectedRegion === region) {
                    selectedRegion = null;
                    doNotHighlight();
                } else {
                    selectedRegion = region;
                    highlight(event, d);
                }
            };

            // Add reference lines and labels
            svg.append("line")
                .attr("id", "ref-line")
                .attr("x1", 0)
                .attr("x2", width)
                .attr("y1", y(1))
                .attr("y2", y(1))
                // .style("stroke", "rgb(0, 68, 11)")
                .attr("stroke-width", 2.5)
                .attr("stroke-dasharray", "3 3");

            svg.append("text")
                .attr("id", "bio-label")
                .attr("x", 10)
                .attr("y", y(1) - 10)
                .text("World Biocapacity");

            svg.append("line")
                .attr("id", "ref-line")
                .attr("x1", x(0.7))
                .attr("x2", x(0.7))
                .attr("y1", y(8.5))
                .attr("y2", y(0.1))
                .attr("stroke-width", 2)
                .attr("stroke-dasharray", "3 3");

            svg.append("text")
                .attr("id", "ref-label")
                .attr("x", x(0.71))
                .attr("y", y(8.2))
                .text("High");

            svg.append("line")
                .attr("id", "ref-line")
                .attr("x1", x(0.8))
                .attr("x2", x(0.8))
                .attr("y1", y(8.5))
                .attr("y2", y(0.1))
                .attr("stroke-width", 2)
                .attr("stroke-dasharray", "3 3");

            svg.append("text")
                .attr("id", "ref-label")
                .attr("x", x(0.81))
                .attr("y", y(8.2))
                .selectAll("tspan")
                .data(["Very high", "human", "development"]) // Data for each line
                .enter()
                .append("tspan")
                .attr("x", x(0.81))
                .attr("dy", (d, i) => (i === 0 ? 0 : 20))
                .text((d) => d);

            // Add SDG quadrant
            svg.append("rect")
                .attr("id", "sdg-quadrant")
                .attr("x", x(0.7))
                .attr("y", y(1))
                .attr("width", x(0.26))
                .attr("height", 54)
                .style("opacity", 0.3);

            svg.append("text")
                .attr("id", "bio-label")
                .attr("x", x(0.71))
                .attr("y", y(0.54))
                .selectAll("tspan")
                .data(["Global Sustainable", "Development Quadrant"])
                .enter()
                .append("tspan")
                .attr("x", x(0.71))
                .attr("dy", (d, i) => i * 20)
                .text((d) => d);

            // Add dots
            svg.append("g")
                .selectAll("dot")
                .data(data)
                .enter()
                .append("circle")
                .attr("class", (d) => `dot ${d.Region.replace(/\s+/g, "")}`)
                .attr("cx", (d) => x(d.HDI))
                .attr("cy", (d) => y(d["Number of Earths required"]))
                .attr("r", 4)
                .style("fill", (d) => color(d.Region))
                .on("mouseover", showTooltip)
                .on("mouseout", hideTooltip)
                .on("click", toggleSelection);

            // Add legend
            const legend = svg
                .append("g")
                .attr("class", "legend")
                .attr("transform", `translate(50, 30)`);

            color.domain().forEach((region, i) => {
                const legendRow = legend
                    .append("g")
                    .attr("transform", `translate(0, ${i * 28})`);

                legendRow
                    .append("circle")
                    .attr("r", 7)
                    .attr("fill", color(region));

                legendRow
                    .append("text")
                    .attr("x", 15)
                    .attr("y", 5)
                    .style("font-size", "14px")
                    .text(region);

                legendRow
                    .on("mouseover", (event) => highlight(event, region))
                    .on("mouseleave", doNotHighlight)
                    .on("click", (event) => toggleSelection(event, region))
                    .style("cursor", "pointer");
            });

            console.log("Chart successfully created");
        } catch (error) {
            console.error("Error creating chart:", error);
            document.getElementById("container").innerHTML =
                `<p>Error loading chart: ${error.message}</p>`;
        }
    }
</script>


